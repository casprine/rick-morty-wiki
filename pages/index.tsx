import { useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import router from 'next/router';

import { Header, Filters, CharacterCard } from '@/components/index';
import { styled } from '@/stitches';
import { Character, RequestInfo } from '@/types';
import { getCharacters } from 'lib/requests';

const transforCharacters = (data: Array<Character>) => {
  return data.map(({ name, status, species, location, gender, id, image }: Character) => {
    return {
      name,
      status: status.toLocaleLowerCase(),
      species,
      location,
      gender,
      id,
      image,
    };
  });
};

const isEmpty = (value: Array<any>) => value.length === 0;

interface HomePageProps {
  requestInfo: RequestInfo;
  characters: Array<Character>;
}

export async function getServerSideProps() {
  let requestInfo = {};
  let characters = {};

  try {
    const response = await getCharacters({
      status: '',
      gender: '',
      species: '',
      pageNumber: 1,
    });

    requestInfo = response.info;
    characters = transforCharacters(response.results);
  } catch (error) {}

  return {
    props: {
      requestInfo,
      characters,
    },
  };
}

const Home: NextPage<HomePageProps> = ({ characters: propInCharacters = [], requestInfo: propInRequestInfo = {} }) => {
  let [characters, setCharacters] = useState<Character[]>(propInCharacters);
  let [pageNumber, setPageNumber] = useState(1);
  // let [status, setStatus] = useState('');
  // let [gender, setGender] = useState('');
  // let [species, setSpecies] = useState('');
  let [requestInfo, setInfo] = useState<RequestInfo>();

  if (isEmpty(propInCharacters)) {
    return <NoCharacters />;
  }

  return (
    <div>
      <Head>
        <title>Rick and Morty</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MainLayout>
        <Header title="All Characters" />
        <div className="grid">
          <div className="filters">
            <Filters onClear={() => {}} onFilterChange={() => {}} />
          </div>

          <div className="content">
            {characters.map((character: Character) => (
              <CharacterCard {...character} key={character.id} />
            ))}
          </div>
        </div>
      </MainLayout>
    </div>
  );
};

const NoCharacters = () => {
  return (
    <NoCharactersContainer className="flex">
      <p>Hey, We {"couldn't"} find any rick and morty characters</p>
      <button onClick={() => router.reload()}>Reload page</button>
    </NoCharactersContainer>
  );
};

const NoCharactersContainer = styled('div', {
  justifyContent: 'center',
  alignItems: 'center',
  outline: '1px dotted red',
  height: '100vh',
  flexDirection: 'column',

  button: {
    border: '0px',
    backgroundColor: '$blue',
    marginTop: 10,
    height: 46,
    padding: '0 25px',
    color: '$loContrast',
    borderRadius: 4,
    cursor: 'pointer',
  },
});

const MainLayout = styled('section', {
  fontFamily: '$system',
  maxWidth: '1280px',
  margin: '0 auto',

  '*': {
    outline: '1px dotted red',
  },

  '.grid': {
    display: 'grid',
    gridTemplateColumns: 'repeat(12, 1fr)',
    gap: 10,

    '.filters': {
      gridColumn: 'span 3',
    },

    '.content': {
      gridColumn: 'span 9',
      display: 'grid',
      gridTemplateColumns: 'repeat(3, 1fr)',
      justifyContent: 'space-between',
      gap: 20,
    },
  },
});

export default Home;
